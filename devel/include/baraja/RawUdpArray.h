// Generated by gencpp from file baraja/RawUdpArray.msg
// DO NOT EDIT!


#ifndef BARAJA_MESSAGE_RAWUDPARRAY_H
#define BARAJA_MESSAGE_RAWUDPARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <baraja/RawUdp.h>

namespace baraja
{
template <class ContainerAllocator>
struct RawUdpArray_
{
  typedef RawUdpArray_<ContainerAllocator> Type;

  RawUdpArray_()
    : packets()  {
    }
  RawUdpArray_(const ContainerAllocator& _alloc)
    : packets(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::baraja::RawUdp_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::baraja::RawUdp_<ContainerAllocator> >::other >  _packets_type;
  _packets_type packets;





  typedef boost::shared_ptr< ::baraja::RawUdpArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::baraja::RawUdpArray_<ContainerAllocator> const> ConstPtr;

}; // struct RawUdpArray_

typedef ::baraja::RawUdpArray_<std::allocator<void> > RawUdpArray;

typedef boost::shared_ptr< ::baraja::RawUdpArray > RawUdpArrayPtr;
typedef boost::shared_ptr< ::baraja::RawUdpArray const> RawUdpArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::baraja::RawUdpArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::baraja::RawUdpArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::baraja::RawUdpArray_<ContainerAllocator1> & lhs, const ::baraja::RawUdpArray_<ContainerAllocator2> & rhs)
{
  return lhs.packets == rhs.packets;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::baraja::RawUdpArray_<ContainerAllocator1> & lhs, const ::baraja::RawUdpArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace baraja

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::baraja::RawUdpArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baraja::RawUdpArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baraja::RawUdpArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baraja::RawUdpArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baraja::RawUdpArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baraja::RawUdpArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::baraja::RawUdpArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8cbd4d895c0bf5a63184e96e9012fce9";
  }

  static const char* value(const ::baraja::RawUdpArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8cbd4d895c0bf5a6ULL;
  static const uint64_t static_value2 = 0x3184e96e9012fce9ULL;
};

template<class ContainerAllocator>
struct DataType< ::baraja::RawUdpArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baraja/RawUdpArray";
  }

  static const char* value(const ::baraja::RawUdpArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::baraja::RawUdpArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RawUdp[] packets\n"
"\n"
"================================================================================\n"
"MSG: baraja/RawUdp\n"
"string engine_ip\n"
"int8[] udp_buffer\n"
;
  }

  static const char* value(const ::baraja::RawUdpArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::baraja::RawUdpArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.packets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawUdpArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::baraja::RawUdpArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::baraja::RawUdpArray_<ContainerAllocator>& v)
  {
    s << indent << "packets[]" << std::endl;
    for (size_t i = 0; i < v.packets.size(); ++i)
    {
      s << indent << "  packets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::baraja::RawUdp_<ContainerAllocator> >::stream(s, indent + "    ", v.packets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BARAJA_MESSAGE_RAWUDPARRAY_H
