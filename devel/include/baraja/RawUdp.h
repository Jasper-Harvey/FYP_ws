// Generated by gencpp from file baraja/RawUdp.msg
// DO NOT EDIT!


#ifndef BARAJA_MESSAGE_RAWUDP_H
#define BARAJA_MESSAGE_RAWUDP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace baraja
{
template <class ContainerAllocator>
struct RawUdp_
{
  typedef RawUdp_<ContainerAllocator> Type;

  RawUdp_()
    : engine_ip()
    , udp_buffer()  {
    }
  RawUdp_(const ContainerAllocator& _alloc)
    : engine_ip(_alloc)
    , udp_buffer(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _engine_ip_type;
  _engine_ip_type engine_ip;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _udp_buffer_type;
  _udp_buffer_type udp_buffer;





  typedef boost::shared_ptr< ::baraja::RawUdp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::baraja::RawUdp_<ContainerAllocator> const> ConstPtr;

}; // struct RawUdp_

typedef ::baraja::RawUdp_<std::allocator<void> > RawUdp;

typedef boost::shared_ptr< ::baraja::RawUdp > RawUdpPtr;
typedef boost::shared_ptr< ::baraja::RawUdp const> RawUdpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::baraja::RawUdp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::baraja::RawUdp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::baraja::RawUdp_<ContainerAllocator1> & lhs, const ::baraja::RawUdp_<ContainerAllocator2> & rhs)
{
  return lhs.engine_ip == rhs.engine_ip &&
    lhs.udp_buffer == rhs.udp_buffer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::baraja::RawUdp_<ContainerAllocator1> & lhs, const ::baraja::RawUdp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace baraja

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::baraja::RawUdp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baraja::RawUdp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baraja::RawUdp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baraja::RawUdp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baraja::RawUdp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baraja::RawUdp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::baraja::RawUdp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb94c58e0ae8bba1199cfb8b90a1cd25";
  }

  static const char* value(const ::baraja::RawUdp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb94c58e0ae8bba1ULL;
  static const uint64_t static_value2 = 0x199cfb8b90a1cd25ULL;
};

template<class ContainerAllocator>
struct DataType< ::baraja::RawUdp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baraja/RawUdp";
  }

  static const char* value(const ::baraja::RawUdp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::baraja::RawUdp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string engine_ip\n"
"int8[] udp_buffer\n"
;
  }

  static const char* value(const ::baraja::RawUdp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::baraja::RawUdp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.engine_ip);
      stream.next(m.udp_buffer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawUdp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::baraja::RawUdp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::baraja::RawUdp_<ContainerAllocator>& v)
  {
    s << indent << "engine_ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.engine_ip);
    s << indent << "udp_buffer[]" << std::endl;
    for (size_t i = 0; i < v.udp_buffer.size(); ++i)
    {
      s << indent << "  udp_buffer[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.udp_buffer[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BARAJA_MESSAGE_RAWUDP_H
